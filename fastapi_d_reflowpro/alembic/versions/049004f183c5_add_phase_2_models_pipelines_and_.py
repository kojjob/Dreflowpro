"""Add Phase 2 models: pipelines and connectors

Revision ID: 049004f183c5
Revises: 004_add_audit_logs
Create Date: 2025-08-24 13:53:43.356393

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '049004f183c5'
down_revision = '004_add_audit_logs'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pipeline_templates')
    op.drop_table('connector_tests')
    op.drop_table('step_executions')
    op.drop_table('connector_schemas')
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_audit_logs_action'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_correlation'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_correlation_id'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_event_type'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_ip_address'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_outcome'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_resource_id'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_resource_type'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_session_id'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_severity'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_severity_timestamp'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_timestamp_event'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_user_id'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_user_timestamp'))

    op.drop_table('audit_logs')
    op.drop_table('data_sources')
    op.drop_table('pipelines')
    op.drop_table('connectors')
    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('api_keys_key_hash_key'), type_='unique')
        batch_op.create_index(batch_op.f('ix_api_keys_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_api_keys_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_api_keys_key_hash'), ['key_hash'], unique=True)
        batch_op.create_index(batch_op.f('ix_api_keys_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('data_connectors', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_data_connectors_created_by_id'), ['created_by_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_data_connectors_file_type'), ['file_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_data_connectors_last_used'), ['last_used'], unique=False)
        batch_op.create_index(batch_op.f('ix_data_connectors_organization_id'), ['organization_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_data_connectors_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_data_connectors_type'), ['type'], unique=False)

    with op.batch_alter_table('etl_pipelines', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_etl_pipelines_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_etl_pipelines_created_by_id'), ['created_by_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_etl_pipelines_is_scheduled'), ['is_scheduled'], unique=False)
        batch_op.create_index(batch_op.f('ix_etl_pipelines_next_run'), ['next_run'], unique=False)
        batch_op.create_index(batch_op.f('ix_etl_pipelines_organization_id'), ['organization_id'], unique=False)

    with op.batch_alter_table('pipeline_executions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_pipeline_executions_completed_at'), ['completed_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_executions_pipeline_id'), ['pipeline_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_executions_started_at'), ['started_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_executions_started_by_id'), ['started_by_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_executions_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_executions_trigger_type'), ['trigger_type'], unique=False)

    with op.batch_alter_table('pipeline_steps', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_pipeline_steps_pipeline_id'), ['pipeline_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_steps_source_connector_id'), ['source_connector_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_steps_step_order'), ['step_order'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_steps_step_type'), ['step_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_pipeline_steps_transformation_type'), ['transformation_type'], unique=False)

    with op.batch_alter_table('social_accounts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_social_accounts_provider'), ['provider'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_provider_account_email'), ['provider_account_email'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_provider_account_id'), ['provider_account_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_last_login'), ['last_login'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_organization_id'), ['organization_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_organization_id'))
        batch_op.drop_index(batch_op.f('ix_users_last_login'))
        batch_op.drop_index(batch_op.f('ix_users_created_at'))

    with op.batch_alter_table('social_accounts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_social_accounts_user_id'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_provider_account_id'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_provider_account_email'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_provider'))

    with op.batch_alter_table('pipeline_steps', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pipeline_steps_transformation_type'))
        batch_op.drop_index(batch_op.f('ix_pipeline_steps_step_type'))
        batch_op.drop_index(batch_op.f('ix_pipeline_steps_step_order'))
        batch_op.drop_index(batch_op.f('ix_pipeline_steps_source_connector_id'))
        batch_op.drop_index(batch_op.f('ix_pipeline_steps_pipeline_id'))

    with op.batch_alter_table('pipeline_executions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pipeline_executions_trigger_type'))
        batch_op.drop_index(batch_op.f('ix_pipeline_executions_status'))
        batch_op.drop_index(batch_op.f('ix_pipeline_executions_started_by_id'))
        batch_op.drop_index(batch_op.f('ix_pipeline_executions_started_at'))
        batch_op.drop_index(batch_op.f('ix_pipeline_executions_pipeline_id'))
        batch_op.drop_index(batch_op.f('ix_pipeline_executions_completed_at'))

    with op.batch_alter_table('etl_pipelines', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_etl_pipelines_organization_id'))
        batch_op.drop_index(batch_op.f('ix_etl_pipelines_next_run'))
        batch_op.drop_index(batch_op.f('ix_etl_pipelines_is_scheduled'))
        batch_op.drop_index(batch_op.f('ix_etl_pipelines_created_by_id'))
        batch_op.drop_index(batch_op.f('ix_etl_pipelines_created_at'))

    with op.batch_alter_table('data_connectors', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_data_connectors_type'))
        batch_op.drop_index(batch_op.f('ix_data_connectors_status'))
        batch_op.drop_index(batch_op.f('ix_data_connectors_organization_id'))
        batch_op.drop_index(batch_op.f('ix_data_connectors_last_used'))
        batch_op.drop_index(batch_op.f('ix_data_connectors_file_type'))
        batch_op.drop_index(batch_op.f('ix_data_connectors_created_by_id'))

    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_api_keys_user_id'))
        batch_op.drop_index(batch_op.f('ix_api_keys_key_hash'))
        batch_op.drop_index(batch_op.f('ix_api_keys_is_active'))
        batch_op.drop_index(batch_op.f('ix_api_keys_expires_at'))
        batch_op.create_unique_constraint(batch_op.f('api_keys_key_hash_key'), ['key_hash'], postgresql_nulls_not_distinct=False)

    op.create_table('connectors',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('connector_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('connection_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('schema_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_test_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_test_result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('avg_response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success_rate', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_requests', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_requests', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='connectors_created_by_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='connectors_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='connectors_pkey'),
    sa.UniqueConstraint('organization_id', 'name', name='unique_connector_name_per_org', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('pipelines',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('schedule', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('pipelines_created_by_fkey')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('pipelines_organization_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('pipelines_pkey')),
    sa.UniqueConstraint('organization_id', 'name', name=op.f('unique_pipeline_name_per_org'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('data_sources',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('connector_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('source_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('query_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('schema_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('estimated_rows', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('estimated_size_mb', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('refresh_frequency', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_accessed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['connector_id'], ['connectors.id'], name=op.f('data_sources_connector_id_fkey')),
    sa.ForeignKeyConstraint(['schema_id'], ['connector_schemas.id'], name=op.f('data_sources_schema_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('data_sources_pkey'))
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('outcome', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correlation_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('request_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('request_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_logs_pkey'))
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_audit_logs_user_timestamp'), ['user_id', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_timestamp_event'), ['timestamp', 'event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_severity_timestamp'), ['severity', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_severity'), ['severity'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_resource_type'), ['resource_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_resource_id'), ['resource_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_outcome'), ['outcome'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_ip_address'), ['ip_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_correlation_id'), ['correlation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_correlation'), ['correlation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_action'), ['action'], unique=False)

    op.create_table('connector_schemas',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('connector_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('schema_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('schema_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('constraints', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('indexes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('discovered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('row_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_size_mb', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_validated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('validation_errors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['connector_id'], ['connectors.id'], name=op.f('connector_schemas_connector_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('connector_schemas_pkey')),
    sa.UniqueConstraint('connector_id', 'schema_name', 'table_name', name=op.f('unique_schema_per_connector'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('step_executions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pipeline_execution_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('step_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('step_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rows_input', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rows_output', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rows_rejected', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('memory_used_mb', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('input_sample', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_sample', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('transformation_summary', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['pipeline_execution_id'], ['pipeline_executions.id'], name=op.f('step_executions_pipeline_execution_id_fkey')),
    sa.ForeignKeyConstraint(['step_id'], ['pipeline_steps.id'], name=op.f('step_executions_step_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('step_executions_pkey'))
    )
    op.create_table('connector_tests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('connector_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('test_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('test_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('test_query', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sample_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('row_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['connector_id'], ['connectors.id'], name=op.f('connector_tests_connector_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('connector_tests_pkey'))
    )
    op.create_table('pipeline_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('pipeline_templates_created_by_fkey')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('pipeline_templates_organization_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('pipeline_templates_pkey'))
    )
    # ### end Alembic commands ###