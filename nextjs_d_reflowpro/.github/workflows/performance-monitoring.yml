name: üöÄ Performance Monitoring & Analysis

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run performance analysis daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  performance-analysis:
    name: üìä Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: nextjs_d_reflowpro/package-lock.json
    
    - name: üìö Install dependencies
      working-directory: nextjs_d_reflowpro
      run: npm ci
    
    - name: üèóÔ∏è Build application
      working-directory: nextjs_d_reflowpro
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: üìä Run performance analysis
      working-directory: nextjs_d_reflowpro
      run: npm run perf:analyze
    
    - name: üìà Bundle size analysis
      working-directory: nextjs_d_reflowpro
      run: npm run analyze
    
    - name: üìã Generate performance report
      working-directory: nextjs_d_reflowpro
      run: |
        echo "## üìä Performance Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract metrics from performance report
        if [ -f "performance-reports/performance-report.json" ]; then
          BUNDLE_SIZE=$(node -p "JSON.parse(require('fs').readFileSync('performance-reports/performance-report.json', 'utf8')).summary.totalBundleSize")
          CHUNK_COUNT=$(node -p "JSON.parse(require('fs').readFileSync('performance-reports/performance-report.json', 'utf8')).summary.chunkCount")
          
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Size | $(echo $BUNDLE_SIZE | awk '{print $1/1024/1024 " MB"}') | $([ $BUNDLE_SIZE -lt 2097152 ] && echo "‚úÖ Good" || echo "‚ö†Ô∏è Warning") |" >> $GITHUB_STEP_SUMMARY
          echo "| Chunk Count | $CHUNK_COUNT | ‚úÖ Optimized |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Status | Success | ‚úÖ Passing |" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: üì§ Upload performance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports-${{ github.sha }}
        path: |
          nextjs_d_reflowpro/performance-reports/
          nextjs_d_reflowpro/.next/analyze/
        retention-days: 30
    
    - name: üö® Performance budget check
      working-directory: nextjs_d_reflowpro
      run: |
        # Check if bundle size exceeds budget (2MB)
        BUNDLE_SIZE=$(node -p "JSON.parse(require('fs').readFileSync('performance-reports/performance-report.json', 'utf8')).summary.totalBundleSize")
        if [ $BUNDLE_SIZE -gt 2097152 ]; then
          echo "‚ùå Bundle size ($BUNDLE_SIZE bytes) exceeds budget (2MB)"
          exit 1
        else
          echo "‚úÖ Bundle size within budget"
        fi

  lighthouse-analysis:
    name: üîç Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: performance-analysis
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: nextjs_d_reflowpro/package-lock.json
    
    - name: üìö Install dependencies
      working-directory: nextjs_d_reflowpro
      run: npm ci
    
    - name: üèóÔ∏è Build and start application
      working-directory: nextjs_d_reflowpro
      run: |
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: production
    
    - name: üîç Run Lighthouse audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './nextjs_d_reflowpro/lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
    
    - name: üìä Lighthouse results summary
      run: |
        echo "## üîç Lighthouse Performance Audit" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Lighthouse audit completed. Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY

  performance-regression-check:
    name: üìà Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: üì• Checkout PR code
      uses: actions/checkout@v4
    
    - name: üì• Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}
        path: base
    
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: nextjs_d_reflowpro/package-lock.json
    
    - name: üîç Compare performance metrics
      run: |
        echo "## üìà Performance Regression Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Build and analyze current branch
        cd nextjs_d_reflowpro
        npm ci
        npm run build
        npm run perf:analyze
        CURRENT_SIZE=$(node -p "JSON.parse(require('fs').readFileSync('performance-reports/performance-report.json', 'utf8')).summary.totalBundleSize")
        
        # Build and analyze base branch
        cd ../base/nextjs_d_reflowpro
        npm ci
        npm run build
        npm run perf:analyze
        BASE_SIZE=$(node -p "JSON.parse(require('fs').readFileSync('performance-reports/performance-report.json', 'utf8')).summary.totalBundleSize")
        
        # Calculate difference
        DIFF=$((CURRENT_SIZE - BASE_SIZE))
        PERCENT_CHANGE=$(echo "scale=2; $DIFF * 100 / $BASE_SIZE" | bc)
        
        echo "| Metric | Base | Current | Change |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Size | $(echo $BASE_SIZE | awk '{print $1/1024/1024 " MB"}') | $(echo $CURRENT_SIZE | awk '{print $1/1024/1024 " MB"}') | ${PERCENT_CHANGE}% |" >> $GITHUB_STEP_SUMMARY
        
        # Check for significant regression (>10% increase)
        if (( $(echo "$PERCENT_CHANGE > 10" | bc -l) )); then
          echo "‚ö†Ô∏è **Performance regression detected!** Bundle size increased by ${PERCENT_CHANGE}%" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "‚úÖ No significant performance regression detected" >> $GITHUB_STEP_SUMMARY
        fi

  performance-dashboard-update:
    name: üìä Update Performance Dashboard
    runs-on: ubuntu-latest
    needs: [performance-analysis, lighthouse-analysis]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üìä Update performance metrics
      run: |
        # This would integrate with your monitoring dashboard
        # For example, sending metrics to DataDog, New Relic, or custom dashboard
        echo "Updating performance dashboard with latest metrics..."
        
        # Example: Send metrics to webhook
        # curl -X POST "${{ secrets.PERFORMANCE_WEBHOOK_URL }}" \
        #   -H "Content-Type: application/json" \
        #   -d '{"bundle_size": "'$BUNDLE_SIZE'", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'

  notify-performance-results:
    name: üì¢ Notify Performance Results
    runs-on: ubuntu-latest
    needs: [performance-analysis, lighthouse-analysis]
    if: always()
    
    steps:
    - name: üì¢ Send Slack notification
      if: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        STATUS="${{ needs.performance-analysis.result }}"
        if [ "$STATUS" = "success" ]; then
          COLOR="good"
          EMOJI="‚úÖ"
          MESSAGE="Performance analysis completed successfully"
        else
          COLOR="danger"
          EMOJI="‚ùå"
          MESSAGE="Performance analysis failed"
        fi
        
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "attachments": [{
              "color": "'$COLOR'",
              "title": "'$EMOJI' DreflowPro Performance Report",
              "text": "'$MESSAGE'",
              "fields": [
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }
              ]
            }]
          }'
